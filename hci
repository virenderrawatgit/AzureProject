# Define the characteristics of the VM, and create
$nodeName = "AZNODE83"
$newIP = "192.168.0.83"
New-VM `
    -Name $nodeName  `
    -MemoryStartupBytes 32GB `
    -SwitchName "InternalNAT" `
    -Path "v:\VMs\" `
    -NewVHDPath "v:\VMs\$nodeName\Virtual Hard Disks\$nodeName.vhdx" `
    -NewVHDSizeBytes 300GB `
    -Generation 2



===========================================


Once the VM is successfully created, you should connect the Azure Stack HCI 20H2 ISO file, downloaded earlier.

$nodeName = "AZNODE83"
$newIP = "192.168.0.83"
# Disable Dynamic Memory
Set-VMMemory -VMName $nodeName -DynamicMemoryEnabled $false
# Add the DVD drive, attach the ISO to DC01 and set the DVD as the first boot device
$DVD = Add-VMDvdDrive -VMName $nodeName -Path C:\ISO\AzureStackHCI.iso -Passthru
Set-VMFirmware -VMName $nodeName -FirstBootDevice $DVD

======================================

Finally, you need to add some additional network adapters, set the vCPU count, enable nested virtualization, and add data hard drives.

$nodeName = "AZNODE83"
$newIP = "192.168.0.83"
# Set the VM processor count for the VM
Set-VM -VMname $nodeName -ProcessorCount 16
# Add the virtual network adapters to the VM and configure appropriately
1..3 | ForEach-Object { 
    Add-VMNetworkAdapter -VMName $nodeName -SwitchName InternalNAT
    Set-VMNetworkAdapter -VMName $nodeName -MacAddressSpoofing On -AllowTeaming On 
}
# Create the DATA virtual hard disks and attach them
$dataDrives = 1..4 | ForEach-Object { New-VHD -Path "v:\VMs\$nodeName\Virtual Hard Disks\DATA0$_.vhdx" -Dynamic -Size 100GB }
$dataDrives | ForEach-Object {
    Add-VMHardDiskDrive -Path $_.path -VMName $nodeName
}
# Disable checkpoints
Set-VM -VMName $nodeName -CheckpointType Disabled
# Enable nested virtualization
Set-VMProcessor -VMName $nodeName -ExposeVirtualizationExtensions $true -Verbose

=============================================================================


# Open a VM Connect window, and start the VM
$nodeName = "AZNODE83"
$newIP = "192.168.0.83"
vmconnect.exe localhost $nodeName
Start-Sleep -Seconds 5
Start-VM -Name $nodeName

============================================================================


#Configure Azure Stack HCI 20H2 node networking using PowerShell Direct
$nodeName = "AZNODE83"
$newIP = "192.168.0.83"
# Define local credentials
$azsHCILocalCreds = Get-Credential -UserName "Administrator" -Message "Enter the password used when you deployed the Azure Stack HCI 20H2 OS"
# Refer to earlier in the script for $nodeName and $newIP
Invoke-Command -VMName $nodeName -Credential $azsHCILocalCreds -ScriptBlock {
    # Set Static IP
    New-NetIPAddress -IPAddress "$using:newIP" -DefaultGateway "192.168.0.1" -InterfaceAlias "Ethernet" -PrefixLength "24" | Out-Null
    Set-DnsClientServerAddress -InterfaceAlias "Ethernet" -ServerAddresses ("192.168.0.2")
    $nodeIP = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias "Ethernet" | Select-Object IPAddress
    Write-Verbose "The currently assigned IPv4 address for $using:nodeName is $($nodeIP.IPAddress)" -Verbose 
}


======================================================================
#Join the domain using PowerShell Direct
$nodeName = "AZNODE83"
$newIP = "192.168.0.83"
# Define domain-join credentials
$domainName = "guman.org"
$domainAdmin = "$domainName\administrator"
$domainCreds = Get-Credential -UserName "$domainAdmin" -Message "Enter the password for the LabAdmin account"
Invoke-Command -VMName $nodeName -Credential $azsHCILocalCreds -ArgumentList $domainCreds -ScriptBlock {
    # Change the name and join domain
    Rename-Computer -NewName $Using:nodeName -LocalCredential $Using:azsHCILocalCreds -Force -Verbose
    Start-Sleep -Seconds 5
    Add-Computer -DomainName "guman.org" -Credential $Using:domainCreds -Force -Options JoinWithNewName,AccountCreate -Restart -Verbose
}

# Test for the node to be back online and responding
while ((Invoke-Command -VMName $nodeName -Credential $domainCreds {"Test"} -ErrorAction SilentlyContinue) -ne "Test") {
    Start-Sleep -Seconds 1
    Write-Host "Waiting for server to come back online"
}
Write-Verbose "$nodeName is now online. Proceed to the next step...." -Verbose

============================================================================

#Enable the Hyper-V role on your Azure Stack HCI 20H2 Node
$nodeName = "AZNODE83"
$newIP = "192.168.0.83"
# Provide the domain credentials to log into the VM
$domainName = "guman.org"
$domainAdmin = "$domainName\administrator"
$domainCreds = Get-Credential -UserName "$domainAdmin" -Message "Enter the password for the LabAdmin account"
Invoke-Command -VMName $nodeName -Credential $domainCreds -ScriptBlock {
    # Enable the Hyper-V role within the Azure Stack HCI 20H2 OS
    Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -NoRestart -Verbose
}

Write-Verbose "Rebooting node for changes to take effect" -Verbose
Stop-VM -Name $nodeName
Start-Sleep -Seconds 5
Start-VM -Name $nodeName

# Test for the node to be back online and responding
while ((Invoke-Command -VMName $nodeName -Credential $domainCreds {"Test"} -ErrorAction SilentlyContinue) -ne "Test") {
    Start-Sleep -Seconds 1
}
Write-Verbose "$nodeName is now online. Proceeding to install Hyper-V PowerShell...." -Verbose

Invoke-Command -VMName $nodeName -Credential $domainCreds -ScriptBlock {
    # Enable the Hyper-V PowerShell within the Azure Stack HCI 20H2 OS
    Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Management-PowerShell -All -NoRestart -Verbose
}

Write-Verbose "Rebooting node for changes to take effect" -Verbose
Stop-VM -Name $nodeName
Start-Sleep -Seconds 5
Start-VM -Name $nodeName

# Test for the node to be back online and responding
while ((Invoke-Command -VMName $nodeName -Credential $domainCreds {"Test"} -ErrorAction SilentlyContinue) -ne "Test") {
    Start-Sleep -Seconds 1
}
Write-Verbose "$nodeName is now online. Proceed to the next step...." -Verbose
